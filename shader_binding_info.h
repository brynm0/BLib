/* ========================================================================
   $File: $
   $Date: $
   $Revision: $
   $Creator: Bryn Murrell $
   ======================================================================== */
#ifndef VK_SHADER_BINDING_INFO_H
#define VK_SHADER_BINDING_INFO_H

#pragma pack(push,1)
#include "blib_utils.h"

enum ShaderDescriptorType
{
    SHADER_DESCRIPTOR_TYPE_SAMPLER = 0,
    SHADER_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER = 1,
    SHADER_DESCRIPTOR_TYPE_SAMPLED_IMAGE = 2,
    SHADER_DESCRIPTOR_TYPE_STORAGE_IMAGE = 3,
    SHADER_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER = 4,
    SHADER_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER = 5,
    SHADER_DESCRIPTOR_TYPE_UNIFORM_BUFFER = 6,
    SHADER_DESCRIPTOR_TYPE_STORAGE_BUFFER = 7,
    SHADER_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC = 8,
    SHADER_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC = 9,
    SHADER_DESCRIPTOR_TYPE_INPUT_ATTACHMENT = 10,
    SHADER_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT = 1000138000,
    SHADER_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_NV = 1000165000,
    SHADER_DESCRIPTOR_TYPE_MAX_ENUM = 0x7FFFFFFF

};

enum ShaderStage
{
    SHADER_STAGE_VERTEX_BIT = 0x00000001,
    SHADER_STAGE_TESSELLATION_CONTROL_BIT = 0x00000002,
    SHADER_STAGE_TESSELLATION_EVALUATION_BIT = 0x00000004,
    SHADER_STAGE_GEOMETRY_BIT = 0x00000008,
    SHADER_STAGE_FRAGMENT_BIT = 0x00000010,
    SHADER_STAGE_COMPUTE_BIT = 0x00000020,
    SHADER_STAGE_ALL_GRAPHICS = 0x0000001F,
    SHADER_STAGE_ALL = 0x7FFFFFFF,
    SHADER_STAGE_RAYGEN_BIT_NV = 0x00000100,
    SHADER_STAGE_ANY_HIT_BIT_NV = 0x00000200,
    SHADER_STAGE_CLOSEST_HIT_BIT_NV = 0x00000400,
    SHADER_STAGE_MISS_BIT_NV = 0x00000800,
    SHADER_STAGE_INTERSECTION_BIT_NV = 0x00001000,
    SHADER_STAGE_CALLABLE_BIT_NV = 0x00002000,
    SHADER_STAGE_TASK_BIT_NV = 0x00000040,
    SHADER_STAGE_MESH_BIT_NV = 0x00000080,
    SHADER_STAGE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
};



struct shader_binding_info
{
    ShaderDescriptorType type;
    ShaderStage stage_flags;
    b32 is_push_constant;
    //if push constant, ignore binding
    uint32_t binding;
};

#pragma pack(pop)

#endif //VK_SHADER_BINDING_INFO_H
